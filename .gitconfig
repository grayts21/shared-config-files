[alias]
 # Revert, adis, Discard changes for sepcified file, specify . for all
	adis = "!echo git checkout -- $1 $2 $3 $4 $5;git checkout --"
 # Config, alist=all config, alias=config alias, aliasl=config alias search
	alist = "!echo git config --list;git config --list"
	alias = "!echo git config --list | grep 'alias';git config --list | grep 'alias'"
	aliasl = "!echo git config --list | grep 'alias' | grep $1;git config --list | grep 'alias' | grep "
 # Commit, amc, amend last commit
	amc = "!echo git commit --amend -m $1 $2 $3 $4 $5;git commit --amend -m"
 # Status, ast=status --short --branch --show-stash
	ast = "!echo git status --short --branch --show-stash;git status --short --branch --show-stash"
 # Status, astt, no untracked files (which takes more time)
	astt = "!echo git status --short --branch --show-stash -uno $1 $2 $3 $4 $5;git status --short --branch --show-stash -uno"
 # Commit, acm=commit -a, acmm=commit without adding
	acm = "!echo git commit --all --branch -m $1 $2 $3 $4 $5;git commit --all --branch -m"
 # Commit, aced, commit without a message on the command line (will use editor)
	aced = "!echo git commit --all --branch $1 $2 $3 $4 $5;git commit --all --branch"
 # Commit, aco+co
	aco = "!echo git checkout $1 $2 $3 $4 $5;git checkout"
	co = "!echo git checkout $1 $2 $3 $4 $5;git checkout"
 # Branch, abr+br=branch with params, aba=branch -vva
	abr = "!echo git branch $1 $2 $3 $4 $5;git branch"
	br = "!echo git branch $1 $2 $3 $4 $5;git branch"
	aba = "!echo git branch -vva;git branch -vva"
	abc = "!echo git checkout -b $1 $2 $3 $4 $5;git checkout -b"
	abd = "!echo git branch --delete $1 $2 $3 $4 $5;git branch --delete"
	abdf = "!echo git branch --delete --force $1 $2 $3 $4 $5;git branch --delete --force"
	abo = "!echo git remote show origin $1 $2 $3 $4 $5;git remote show origin"
	abdal = "!echo --- checkout master;git checkout master;\
		echo --- git branch -vva;git branch -vva;\
		echo --- git remote show origin;git remote show origin;\
		echo ---------------------------;\
		echo --- git branch --delete --force $1 $2 $3 $4 $5;git branch --delete --force $1 $2 $3 $4 $5;\
		echo --- git push --delete origin $1 $2 $3 $4 $5;git push --delete origin $1 $2 $3 $4 $5;\
		echo --- git fetch --all --prune;git fetch --all --prune;\
		echo ---------------------------;\
		echo --- git branch -vva;git branch -vva;\
		echo --- git remote show origin;git remote show origin;\
		echo --- Deleted branch from local and remote: "
	abrr = "!echo git branch --force --move $1 $2 $3 $4 $5;git branch --force --move"
 # Commit+Push, acp, add, commit -m param 1, push
	acp = "!echo --- git add .;git add .;\
		echo --- git commit -m \"$1\";git commit -m \"$1\";\
		echo --- git push origin HEAD;git push origin HEAD;\
		echo --- Message used: "
 # Merge, amto, merge to param 1 branch
	amto = "!echo --- git merge @{-1};git merge @{-1};\
		echo --- git checkout $1;git checkout $1;\
		echo --- git merge @{-1} $1 $2 $3 $4 $5;git merge @{-1}"
 # Merge, amtos, merge --squash
	amtos = "!echo --- git checkout $1;git checkout $1;\
		echo --- git merge --squash @{-1} $1 $2 $3 $4 $5;git merge --squash @{-1}"
	amh = "!echo   amm=normal merge -- amnf=--no-ff -- amff=--ff-only"
 # Merge, amm, Normal merge
	amm = "!echo git merge $1 $2 $3 $4 $5;git merge"
	ammc = "!echo git merge --continue $1 $2 $3 $4 $5;git merge --continue"
	amma = "!echo git merge --abort $1 $2 $3 $4 $5;git merge --abort"
 # Merge, amnf=merge --no-ff no fast forward, creates a commit
	amnf = "!echo git merge --no-ff $1 $2 $3 $4 $5;git merge --no-ff"
 # Merge, amff=merge --ff-only only run if fast forward can be used
	amff = "!echo git merge --ff-only $1 $2 $3 $4 $5;git merge --ff-only"
 # Log, alo|alog=log, ala=og --all, alm=log master, ald=log develop
	al = "!echo Log, alo|alog=log, ala=log --all, alm=log master, ald=log develop"
	alo = "!echo git log --pretty=lg --graph $1 $2 $3 $4 $5;git log --pretty=lg --graph"
	alog = "!echo git log --pretty=lg --graph $1 $2 $3 $4 $5;git log --pretty=lg --graph"
	ala = "!echo git log --all --pretty=lg --graph $1 $2 $3 $4 $5;git log --all --pretty=lg --graph"
	alh = "!echo git log --all --pretty=lg --graph HEAD..master;git log --all --pretty=lg --graph HEAD..master"
	alm = "!echo git log master --pretty=lg --graph $1 $2 $3 $4 $5;git log master --pretty=lg --graph"
	ald = "!echo git log develop --pretty=lg --graph $1 $2 $3 $4 $5;git log develop --pretty=lg --graph"
	alfp = "!echo git log --first-parent --pretty=lg --graph $1 $2 $3 $4 $5;git log --first-parent --pretty=lg --graph"
	alrl = "!echo git log --reflog --pretty=lg --graph $1 $2 $3 $4 $5;git log --reflog --pretty=lg --graph"
	alor = "!echo --- git fetch $1 $2 $3 $4 $5;git fetch;\
		echo --- git log --pretty=lg --graph --remotes=origin;git log --pretty=lg --graph --remotes=origin"
 # Reflog commands
	arl = "!echo --- git reflog;git reflog"
	arlg = "!echo git reflog - grep $1 $2 $3 $4 $5;git reflog | grep"
 # Reset, auc, undo last commit to working area
	auc = "!echo git reset --mixed HEAD~1 $1 $2 $3 $4 $5;git reset --mixed HEAD~1"
 # Reset, ars, put in workspace, reset to Staging
	ars = "!echo git reset --mixed $1 $2 $3 $4 $5;git reset --mixed"
 # Reset, arc, reset to Changed
	arc = "!echo git reset --soft $1 $2 $3 $4 $5;git reset --soft"
 # Reset, aus=remove from staging, specify a file or .
	aus = "!echo git reset HEAD $1 $2 $3 $4 $5;git reset HEAD"
 # Reset, arh, reset --hard
	arh = "!echo git reset --hard $1 $2 $3 $4 $5;git reset --hard"
 # Show, atp, Show what would be pushed to master
	atp = "!echo git log master..HEAD --pretty=lg --graph $1 $2 $3 $4 $5;git log master..HEAD --pretty=lg --graph"
 # Interactive rebase, ari=rebase -i, asqu=autosquash
	ari = "!echo git rebase --interactive --stat $1 $2 $3 $4 $5;git rebase --interactive --stat"
	asqu = "!echo git rebase --interactive --stat --autosquash --root $1 $2 $3 $4 $5;git rebase --interactive --stat --autosquash --root"
 # Rebase, are=rebase, areto=rebase --onto, arec=rebase --continue, ares=rebase -skip, arew=am --show-current-patch
  ar = "!echo Rebase, are=rebase, areto=rebase --onto, arec=rebase --continue, ares=rebase -skip, arew=am --show-current-patch"
 	are = "!echo git rebase $1 $2 $3 $4 $5;git rebase"
 	areto = "!echo git rebase --onto $1 $2 $3 $4 $5;git rebase --onto"
	arec = "!echo git rebase --continue;git rebase --continue"
	ares = "!echo git rebase --skip;git rebase --skip"
	area = "!echo git rebase --abort;git rebase --abort"
  arew = "!echo git am --show-current-patch $1 $2 $3 $4 $5;git am --show-current-patch"
 # Add and look for renamed file
	aadd = "!echo git add -A $1 $2 $3 $4 $5;git add -A"
 # Push, apu and pu, git push
	apu = "!echo git push origin HEAD $1 $2 $3 $4 $5;git push origin HEAD"
	pu = "!echo git push origin HEAD $1 $2 $3 $4 $5;git push origin HEAD"
 # Pull, pl=Help, apl=pull, aplr=pull --rebase, aplff=pull --ff-only, aplnf=pull --no-ff
	pl = "!echo Pull, pl=Help, apl=pull, aplr=pull --rebase, aplff=pull --ff-only, aplnf=pull --no-ff"
	apl = "!echo git pull --verbose $1 $2 $3 $4 $5;git pull --verbose"
	aplr = "!echo git pull --rebase --verbose --autostash $1 $2 $3 $4 $5;git pull --rebase --verbose --autostash"
	aplff = "!echo git pull --verbose --ff-only $1 $2 $3 $4 $5;git pull --verbose --ff-only"
	aplnf = "!echo git pull --verbose --no-ff $1 $2 $3 $4 $5;git pull --verbose --no-ff"
 # Fetch, afe=fetch, afea=fetch --all
	afe = "!echo git fetch --verbose $1 $2 $3 $4 $5;git fetch --verbose"
	afea = "!echo git fetch --verbose --all $1 $2 $3 $4 $5;git fetch --verbose --all"
 # Stash, asts=stash push
	asts = "!echo git stash push $1 $2 $3 $4 $5;git stash push"
	astsi = "!echo git stash push --include-untracked $1 $2 $3 $4 $5;git stash push --include-untracked"
	astu = "!echo git stash pop $1 $2 $3 $4 $5;git stash pop"
	astl = "!echo git stash list $1 $2 $3 $4 $5;git stash list"
 # Show, Diff
	ashb = "!echo git show --stat --oneline --no-commit-id -r -t $1 $2 $3 $4 $5;git show --stat --oneline --no-commit-id -r -t"
	adib = "!echo git diff --stat --oneline $1 $2 $3 $4 $5;git diff --stat --oneline"
 # Difftool and Mergetool
	adi = "!echo git difftool --prompt $1 $2 $3 $4 $5;git difftool --prompt"
	adt = "!echo git difftool --prompt $1 $2 $3 $4 $5;git difftool --prompt"
	adid = "!echo git difftool --dir-diff --no-symlinks $1 $2 $3 $4 $5;git difftool --dir-diff --no-symlinks"
	amt = "!echo git mergetool --prompt $1 $2 $3 $4 $5;git mergetool --prompt"
	adic = "!echo git difftool --dir-diff --no-symlinks $1~1..$1;git difftool --dir-diff --no-symlinks $1~1.."
	adih = "!echo git difftool --dir-diff --no-symlinks HEAD..$1;git difftool --dir-diff --no-symlinks HEAD.."
[diff]
	algorithm = histogram
[help]
	autocorrect = 0
[core]
	autocrlf = false
	editor = notepad
	symlinks = true
[sequence]
	editor = notepad
[Rebase]
	missingCommitsCheck = error
 	instructionFormat = " |%d %s [%cn] (%cD)"
 	stat = true
[merge]
	algorithm = histogram
[push]
	default = matching
[pretty]
  lg = %Cgreen%h%C(yellow bold)%d %C(blue)%s %C(cyan dim)%cn %C(green dim)%cr%Creset
[branch]
	autosetuprebase = never
[gui]
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[color "status"]
	header = blue
	added = green
	updated = "magenta ul bold"
	changed = green
	untracked = "blue normal ul"
	branch = "green ul"
	nobranch = red
	modified = red
	ui = true
	# normal, black, red, green, yellow, blue, magenta, cyan and white;
	# bold, dim, ul, blink and reverse.
##############################
# [Progressive]
#PG#[user]
#PG#	name = Tony Gray
#PG#	email = agray3@progressive.com
#PG#[diff]
#PG#	tool = bc3
#PG#[difftool]
#PG#	prompt = false
#PG#[difftool "bc3"]
#PG#	cmd = \"C:\\Program Files (x86)\\Beyond Compare 4\\bcomp.exe\" \"$LOCAL\" \"$REMOTE\"
#PG#	# cmd = \"C:\\Program Files (x86)\\Beyond Compare 4\\bcomp.exe\" \"$LOCAL\" \"$REMOTE\" /lefttitle=\"$LOCAL\" /righttitle=\"$REMOTE\" /leftreadonly /rightreadonly
#PG#  # $(cygpath -w "$LOCAL")
#PG#[merge]
#PG# 	tool = bc3
#PG#[mergetool]
#PG#	prompt = false
#PG#  keepBackup = false
#PG#[mergetool "bc3"]
#PG#	cmd = \"C:\\Program Files (x86)\\Beyond Compare 4\\bcomp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
#PG#	# cmd = \"C:\\Program Files (x86)\\Beyond Compare 4\\bcomp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\" /lefttitle=\"$LOCAL\" /righttitle=\"$REMOTE\" /centertitle=\"$BASE\" /outputtitle=\"$MERGED\" /leftreadonly /rightreadonly /centerreadonly
#PG#	trustExitCode = true
#PG#[credential]
#PG##	interactive = never
#PG##	authority = Windows
#PG#	helper = wincred
#PG#[http]
#PG#	sslbackend = schannel
#PG#	schannelCheckRevoke=false

##############################
# [Home]
#HM#[user]
#HM#	name = Tony Gray
#HM#	email = grayts21@gmail.com
#HM#[diff]
#HM#	tool = extMerge
#HM#[difftool]
#HM#	prompt = false
#HM#[difftool "extMerge"]
#HM#	cmd = \"C:\\Program Files (x86)\\WinMerge\\WinMergeU.exe\" \"$LOCAL\" \"$REMOTE\"
#HM#  # $(cygpath -w "$LOCAL")
#HM#[merge]
#HM# 	tool = extMerge
#HM#[mergetool]
#HM#	prompt = false
#HM#  keepBackup = false
#HM#[mergetool "extMerge"]
#HM#	cmd = \"C:\\Program Files (x86)\\WinMerge\\WinMergeU.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
#HM#	trustExitCode = true
#HM#[merge]
#HM#    tool = meld
#HM#[mergetool "meld"]
#HM#    cmd = \"C://Program Files (x86)//Meld//meld.exe\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\" --output \"$MERGED\"
#HM#		path = \"C://Program Files (x86)//Meld//meld.exe\"
#HM#[diff]
#HM#    tool = meld
#HM#[difftool]
#HM#    prompt = false
#HM#[difftool "meld"]
#HM#    cmd = \"C://Program Files (x86)//Meld//meld.exe\" \"$LOCAL\" \"$REMOTE\"
#HM#		path = \"C://Program Files (x86)//Meld//meld.exe\"